/*使用大数类（我也不知道我自己怎么想的）
public int waysToStep(int n) {
        LinkedList<BigInteger> list=new LinkedList<BigInteger>();
        list.add(new BigInteger("0")); //0
        list.add(new BigInteger("1"));//1
        list.add(new BigInteger("2"));//2
        list.add(new BigInteger("4"));//3
       // System.out.println(list.size());
       // System.out.println("集合长度1是"+list.size());
        if (n < 4) {
            return Integer.parseInt(list.get(n).toString());
        }
        for(int i=4;i<=n;i++)
        {
            BigInteger temp = list.get(list.size()-1).add(list.get(list.size()-2));
            list.add(temp.add(list.get(list.size()-3)));
        //    System.out.println("栈顶元素是"+list.getLast());
         //   System.out.println("集合长度2是"+list.size());
            list.removeFirst();
        }
        BigInteger result[] = list.getLast().divideAndRemainder(new BigInteger("1000000007"));
        BigInteger rs = result[1];
        int res = Integer.parseInt(rs.toString());
        return res;
    }
*/
class Solution {
    public int waysToStep(int n) {
            int dp[] = new int[n+4];
            dp[1] = 1 ;
            dp[2] = 2 ;
            dp[3] = 4 ;
            if(n>3)
            {
                for(int i=4;i<=n;i++){
                    dp[i]=((dp[i-1]+dp[i-2])%1000000007+dp[i-3])%1000000007;
                }
            }
            return dp[n] ;
        }

    }
